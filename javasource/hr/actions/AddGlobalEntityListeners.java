// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package hr.actions;

import com.mendix.core.Core;
import com.mendix.core.actionmanagement.ActionListener;
import com.mendix.core.actionmanagement.CoreAction;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IMendixObjectMember;
import com.mendix.webui.CustomJavaAction;
import java.util.List;
import java.util.Map;

public class AddGlobalEntityListeners extends CustomJavaAction<java.lang.Boolean>
{
	public AddGlobalEntityListeners(IContext context)
	{
		super(context);
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
        Core.getListenersRegistry().registerBeforeCommitListener(objects -> {
            ILogNode logger = Core.getLogger("BeforeCommitListener");
            for (IMendixObject obj : objects) {
                logger.info("ObjectType: " + obj.getType());

                List<? extends IMendixObjectMember<?>> changedMembers = obj.getChangedMembers(getContext());

                logger.info(String.format("Has changed members: %b? Number of changed members: %d", obj.isChanged(), changedMembers.size()));
                for (IMendixObjectMember member : changedMembers) {
                    logger.info(
                            String.format("Changed member %s : %s -> %s", member.getName(),
                                    member.getOriginalValue(getContext()) != null ? member.getOriginalValue(getContext()).toString() : "",
                                    member.getValue(getContext()) != null ? member.getValue(getContext()).toString() : ""
                            )
                    );
                }
            }
        });


        Core.getListenersRegistry().registerAfterCommitListener(objects -> {
            ILogNode logger = Core.getLogger("AfterCommitListener");
            for (IMendixObject obj : objects) {
                logger.info("ObjectType: " + obj.getType());

                Map<String, ? extends IMendixObjectMember<?>> members = obj.getMembers(getContext());

                for (IMendixObjectMember member : members.values()) {
                    logger.info(
                            String.format("Member %s = %s", member.getName(),
                                    member.getValue(getContext()) != null ? member.getValue(getContext()).toString() : "")
                    );
                }
            }
        });


        return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "AddGlobalEntityListeners";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
